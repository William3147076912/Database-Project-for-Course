<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qwq.user.mapper.UserMapper">
    
    <resultMap type="User" id="UserResult">
        <result property="userId"    column="user_id"    />
        <result property="username"    column="username"    />
        <result property="password"    column="password"    />
        <result property="email"    column="email"    />
        <result property="role"    column="role"    />
        <result property="institutionId"    column="institution_id"    />
        <result property="registrationTime"    column="registration_time"    />
    </resultMap>

    <sql id="selectUserVo">
        select user_id, username, password, email, role, institution_id, registration_time from user
    </sql>

    <select id="selectUserList" parameterType="User" resultMap="UserResult">
        <include refid="selectUserVo"/>
        <where>  
            <if test="username != null  and username != ''"> and username like concat('%', #{username}, '%')</if>
            <if test="password != null  and password != ''"> and password = #{password}</if>
            <if test="email != null  and email != ''"> and email = #{email}</if>
            <if test="role != null  and role != ''"> and role = #{role}</if>
            <if test="institutionId != null "> and institution_id = #{institutionId}</if>
            <if test="registrationTime != null "> and registration_time = #{registrationTime}</if>
        </where>
    </select>
    
    <select id="selectUserByUserId" parameterType="Long" resultMap="UserResult">
        <include refid="selectUserVo"/>
        where user_id = #{userId}
    </select>

    <insert id="insertUser" parameterType="User" useGeneratedKeys="true" keyProperty="userId">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="username != null and username != ''">username,</if>
            <if test="password != null and password != ''">password,</if>
            <if test="email != null and email != ''">email,</if>
            <if test="role != null and role != ''">role,</if>
            <if test="institutionId != null">institution_id,</if>
            <if test="registrationTime != null">registration_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="username != null and username != ''">#{username},</if>
            <if test="password != null and password != ''">#{password},</if>
            <if test="email != null and email != ''">#{email},</if>
            <if test="role != null and role != ''">#{role},</if>
            <if test="institutionId != null">#{institutionId},</if>
            <if test="registrationTime != null">#{registrationTime},</if>
         </trim>
    </insert>

    <update id="updateUser" parameterType="User">
        update user
        <trim prefix="SET" suffixOverrides=",">
            <if test="username != null and username != ''">username = #{username},</if>
            <if test="password != null and password != ''">password = #{password},</if>
            <if test="email != null and email != ''">email = #{email},</if>
            <if test="role != null and role != ''">role = #{role},</if>
            <if test="institutionId != null">institution_id = #{institutionId},</if>
            <if test="registrationTime != null">registration_time = #{registrationTime},</if>
        </trim>
        where user_id = #{userId}
    </update>

    <delete id="deleteUserByUserId" parameterType="Long">
        delete from user where user_id = #{userId}
    </delete>

    <delete id="deleteUserByUserIds" parameterType="String">
        delete from user where user_id in 
        <foreach item="userId" collection="array" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </delete>
</mapper>